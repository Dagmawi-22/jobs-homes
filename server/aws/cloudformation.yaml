AWSTemplateFormatVersion: 2010-09-09
Description: EC2 Instance with access to S3 buckets

Parameters:
  KeyName: 
    Type: String
    Default: w2w_key_pair_eu_west_2_dev

  myInstanceType: 
    Type: String
    Default: t2.medium

  myAMI: 
    Type: String
    Default: ami-027d95b1c717e8c5d
  tier:
    Type: String
    Default: backend
  ReactRepository:
    Type: String
    Description: React Application Repository.
    Default: dev_backend_w2w_repo_eu_west_2
  ArtifactS3Bucket:
    Type: String
    Description: S3 bucket to store artifacts.
    Default: dev-backend-w2w-artifact-bucket-eu-west-2
  BranchName:
    Type: String
    Description: Branch name to deploy.
    Default: develop
  Environment:
    Type: String
    Description: Environment to deploy.
    Default: dev
  DomainName:
    Description: Domain name to be associated with the Elastic IP
    Type: String
    Default: server.dev-wishtowear.com
    
Resources:
  EC2InstanceProfileRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: EC2InstanceProfilePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                Resource: '*'
        - PolicyName: secretsmanager
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: '*'

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceProfileRole


  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 CF security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'          
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8000'          
          ToPort: '8000'
          CidrIp: 0.0.0.0/0
 
  


  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref myAMI 
      InstanceType: !Ref myInstanceType
      KeyName: !Ref KeyName
      Tags:
       - Key: 'Name'
         Value: 'dev-backend-w2w-server'

      SecurityGroups:
        - !Ref MySecurityGroup
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData: 
        Fn::Base64:  |  
           #!/bin/bash
           sudo yum -y update 
           sudo yum -y install ruby
           sudo yum -y install wget
           curl -sL https://rpm.nodesource.com/setup_16.x | sudo bash -
           sudo yum install -y nodejs
           cd /home/admin
           wget https://aws-codedeploy-us-east-2.s3.amazonaws.com/latest/install
           sudo chmod +x ./install
           sudo ./install auto

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref MyEC2Instance
      EIP: !Ref MyEIP
  MyHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
  MyRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref MyHostedZone
      Name: !Ref DomainName
      Type: A
      TTL: '300'
      ResourceRecords:
        - !GetAtt MyEIP.PublicIp

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CodeBuildRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: "CodeBuildCICDAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "codecommit:GitPull"
                Resource:
                  - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ReactRepository}
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                Resource:
                  - Fn::Sub: arn:aws:s3:::codepipeline-${AWS::Region}-*
                  - Fn::Sub: arn:aws:s3:::${ArtifactS3Bucket}/*
                  - Fn::Sub: arn:aws:s3:::${ArtifactS3Bucket}

  BuildReactAppCFNProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub BuildReactAppCFN-${AWS::StackName}
      ServiceRole: !GetAtt [ CodeBuildRole, Arn ]
      Artifacts:
        Type: S3
        Location: !Ref ArtifactS3Bucket
        Name: !Sub BuildReactAppCFN-${AWS::StackName}
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:7.0
      Source:
        Location: !Sub https://git-codecommit.eu-west-2.amazonaws.com/v1/repos/${ReactRepository}
        Type: CODECOMMIT
      TimeoutInMinutes: 15
      Tags:
        - Key: Name
          Value: !Sub BuildReactAppCFN-${AWS::StackName}


  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:
        Fn::Sub: CodeDeployServiceRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: "CodeDeployCICDAccessPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeInstanceStatus'
                  - 'ec2:TerminateInstances'
                  - 'tag:GetTags'
                  - 'tag:GetResources'
                 
                Resource: '*'

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: !Sub ReactApp-${AWS::StackName}
      ComputePlatform: Server

  CodeDeployDeploymentGroup: 
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties: 
      ApplicationName: !Ref CodeDeployApplication
      Ec2TagFilters: 
        - Key: Name
          Value: dev-backend-w2w-server
          Type: "KEY_AND_VALUE"
      ServiceRoleArn: !GetAtt [ CodeDeployServiceRole, Arn ]      
      DeploymentGroupName: !Sub DeploymentGroup-${AWS::StackName}


  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub: CodePipelineRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "CodePipelineCICDAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:GetBucketPolicy"
                Resource:
                  - Fn::Sub: arn:aws:s3:::${ArtifactS3Bucket}
                  - Fn::Sub: arn:aws:s3:::${ArtifactS3Bucket}/*
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "codecommit:ListBranches"
                  - "codecommit:ListRepositories"
                  - "codecommit:BatchGetRepositories"
                  - "codecommit:Get*"
                  - "codecommit:GitPull"
                  - "codecommit:UploadArchive"
                Resource:
                  - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ReactRepository}
              - Effect: "Allow"
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource:
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/BuildReactAppCFN-${AWS::StackName}
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/BuildReactAppCFN-${AWS::StackName}:*
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'

  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub CICDPipe-${AWS::StackName}
      RoleArn: !GetAtt [ CodePipelineRole, Arn ]
      Stages:
        - Name: Source
          Actions:
            - Name: ApplicationSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: ApplicationOutput
              Configuration:
                BranchName: !Ref BranchName
                RepositoryName:
                  Ref: ReactRepository
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              InputArtifacts:
                - Name: ApplicationOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: ReactAppArtifact
              Configuration:
                ProjectName: !Ref BuildReactAppCFNProject
              RunOrder: 1
        - Name: DeployToEC2
          Actions:
            - Name: CodeDeploy
              InputArtifacts:
                - Name: ReactAppArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              RunOrder: 1


      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactS3Bucket